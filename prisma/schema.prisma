// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  name         String
  phone_number String    @unique
  password     String
  otp          Int
  role         AdminRole @default(admin)
  createdAt    DateTime  @default(now())
  modifiedAt   DateTime  @updatedAt
}

enum AdminRole {
  admin
  super_admin
}

model Project {
  id                   Int           @id @default(autoincrement())
  register_no          String        @unique
  temple_name          String
  temple_incharge_name String
  contact              String
  location             String
  status               ProjectStatus @default(proposed)
  start_date           DateTime?
  end_date             DateTime?
  estimate_amount      Int
  expensed_amount      Int
  deleted_at           DateTime?
  created_at           DateTime      @default(now())
  modified_at          DateTime      @updatedAt

  project_activity ProjectActivity[]

  donors Donor[]

  attachments Attachment[] @relation("project_attachment")
}

enum ProjectStatus {
  proposed
  planned
  active
  completed
  scrapped
}

model ProjectActivity {
  id              Int          @id @default(autoincrement())
  projectRef      Project      @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id      Int
  content_english String
  content_tamil   String
  created_at      DateTime     @default(now())
  modified_at     DateTime     @updatedAt
  attachments     Attachment[] @relation("project_activity_attachment")
}

model Attachment {
  id              Int            @id @default(autoincrement())
  attachment_type AttachmentType @default(image)

  project          Project         @relation("project_attachment", fields: [attachment_type_id], references: [id], map: "projectId", onDelete: Cascade)
  project_activity ProjectActivity @relation("project_activity_attachment", fields: [attachment_type_id], references: [id], map: "projectActivityId", onDelete: Cascade)

  attachment_type_id Int

  attachment_path String
  created_at      DateTime @default(now())
  modified_at     DateTime @updatedAt
}

enum AttachmentType {
  file
  image
}

model Donor {
  id                   Int               @id @default(autoincrement())
  name                 String?
  email                String?            @unique
  father_name          String?
  phone_number         String            @unique
  password             String
  otp                  Int?
  is_otp_verified      Boolean           @default(false)
  country              String?
  district             String?
  state                String?
  pincode              Int?
  language             Language?          @default(english)
  is_active            Boolean?           @default(true)
  area_rep_ref         Donor?            @relation("area_rep", fields: [area_rep_id], references: [id], onDelete: SetNull)
  area_rep_id          Int?
  area_rep             Donor[]           @relation("area_rep")
  subscription_plan    SubscriptionPlan? @relation(fields: [subscription_plan_id], references: [id], onDelete: SetNull)
  subscription_plan_id Int?
  deactivated_at       DateTime?
  created_at           DateTime          @default(now())
  modified_at          DateTime          @updatedAt

  projects          Project[]
  donor_deactivates DonorDeactivate[]
  donor_groups      DonorGroup[]
}

enum Language {
  tamil
  english
}

model SubscriptionPlan {
  id             Int      @id @default(autoincrement())
  plan_name      String
  payment_cycle  Int
  payment_amount Int
  is_active      Boolean
  created_at     DateTime @default(now())
  modified_at    DateTime @updatedAt
  donors         Donor[]
}

model DonorDeactivate {
  id       Int    @id @default(autoincrement())
  Donor    Donor  @relation(fields: [donor_id], references: [id])
  donor_id Int
  reason   String
}

model DonorGroup {
  id           Int      @id @default(autoincrement())
  Donor        Donor    @relation(fields: [donor_id], references: [id])
  donor_id     Int
  name         String
  phone_number String
  is_verified  Boolean  @default(false)
  created_at   DateTime @default(now())
  modified_at  DateTime @updatedAt
}

enum payment_mode {
  gpay
  paytm
  phonepe
  amazonpay
  offline
}

enum transaction_status {
  requested
  pending
  failed
  success
}

model PaymentStatus {
  id         Int      @id @default(autoincrement())
  status     String
  created_at DateTime @default(now())

  payments Payment[]
}

model Payment {
  id                 Int           @id @default(autoincrement())
  payment_mode       payment_mode
  payment_status_ref PaymentStatus @relation(fields: [payment_status_id], references: [id])
  payment_status_id  Int
  created_at         DateTime      @default(now())
  transaction_ref    Transaction?  @relation(fields: [transaction_id], references: [id])
  transaction_id     Int
}

model Transaction {
  id             Int                @id @default(autoincrement())
  transaction_no String
  status         transaction_status
  created_at     DateTime           @default(now())
  payments       Payment[]
}
